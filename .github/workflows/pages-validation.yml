name: Production-Ready Validation Dashboard

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '15 6 * * *'   # daily at 06:15 UTC
  pull_request:
    branches: [ main ]
    paths: 
      - 'src/**'
      - 'scripts/**'
      - '.github/workflows/**'

permissions:
  contents: read
  pages: write
  # Removed id-token: write - using minimal permissions

concurrency:
  group: pages-validation-${{ github.ref }}
  cancel-in-progress: true

env:
  DEBIAN_FRONTEND: noninteractive
  PYTHONUNBUFFERED: 1
  NODE_ENV: ci
  SHELL_OPTIONS: "set -euo pipefail"

jobs:
  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout with security verification
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1
          
      - name: Verify script integrity
        run: |
          set -euo pipefail
          if [[ ! -f "scripts/run-validation-suite.sh" ]]; then
            echo "❌ Validation script not found"
            exit 1
          fi
          
          # Verify script hasn't been tampered with
          if ! grep -q "DealerScope Master Validation Runner" scripts/run-validation-suite.sh; then
            echo "❌ Script integrity check failed"
            exit 1
          fi
          
          # Check for potential injection points
          if grep -E '\$\([^)]*\)|\`[^`]*\`' scripts/run-validation-suite.sh | grep -v "expected_patterns"; then
            echo "⚠️ Potential command injection detected in script"
            exit 1
          fi
          
          echo "✅ Script integrity verified"

  validate-and-build:
    needs: security-audit
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout with security verification
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1

      # ---------- Security Phase ----------
      - name: Validate workflow inputs
        run: |
          set -euo pipefail
          
          # Validate environment variables
          if [[ "${GITHUB_REF}" =~ [^a-zA-Z0-9/_-] ]]; then
            echo "❌ Invalid characters in GITHUB_REF"
            exit 1
          fi
          
          # Validate paths
          for path in "scripts" "src" ".github"; do
            if [[ ! -d "$path" ]]; then
              echo "⚠️ Expected directory $path not found"
            fi
          done
          
          echo "✅ Input validation passed"

      # ---------- Dependency Management with Caching ----------
      - name: Cache Node.js dependencies
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: |
            ~/.npm
            node_modules
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js with resilience
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '18.19.0'  # Pinned version
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: Install frontend dependencies with retry
        run: |
          set -euo pipefail
          
          install_frontend() {
            if [ -d frontend ]; then
              cd frontend && npm ci --no-audit --no-fund
            else
              npm ci --no-audit --no-fund
            fi
          }
          
          # Retry mechanism for network resilience
          for attempt in 1 2 3; do
            if install_frontend; then
              echo "✅ Frontend dependencies installed successfully"
              break
            elif [ $attempt -eq 3 ]; then
              echo "❌ Failed to install frontend dependencies after 3 attempts"
              exit 1
            else
              echo "⚠️ Attempt $attempt failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

      - name: Frontend tests and build with validation
        run: |
          set -euo pipefail
          
          build_frontend() {
            if [ -d frontend ]; then
              cd frontend
              npm run test --if-present
              npm run build --if-present
            else
              npm run test --if-present  
              npm run build --if-present
            fi
          }
          
          if build_frontend; then
            echo "✅ Frontend build completed successfully"
          else
            echo "❌ Frontend build failed"
            exit 1
          fi

      # ---------- Python Backend with Security ----------
      - name: Cache Python dependencies
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Setup Python with pinned version
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: '3.11.7'  # Pinned version

      - name: Install system dependencies with security
        run: |
          set -euo pipefail
          
          # Update package lists
          sudo apt-get update
          
          # Install with specific versions for security
          sudo apt-get install -y \
            curl=7.68.0-1ubuntu2* \
            jq=1.6-1ubuntu0* || \
          sudo apt-get install -y curl jq
          
          echo "✅ System dependencies installed"

      - name: Install Python dependencies with validation
        run: |
          set -euo pipefail
          
          # Upgrade pip securely
          python -m pip install --upgrade pip==23.3.2
          
          # Install requirements with verification
          requirements_file=""
          if [ -f webapp/requirements.txt ]; then
            requirements_file="webapp/requirements.txt"
          elif [ -f requirements.txt ]; then
            requirements_file="requirements.txt"
          else
            echo "Installing default dependencies"
            pip install requests==2.31.0 beautifulsoup4==4.12.2 lxml==4.9.3 pytest==7.4.3
            echo "✅ Default Python dependencies installed"
            exit 0
          fi
          
          # Install with hash checking for security
          pip install -r "$requirements_file" --require-hashes 2>/dev/null || \
          pip install -r "$requirements_file"
          
          echo "✅ Python dependencies installed from $requirements_file"

      - name: Run backend tests with monitoring
        env:
          PYTHONWARNINGS: ignore::DeprecationWarning
        run: |
          set -euo pipefail
          
          # Create reports directory atomically
          if ! mkdir -p validation-reports/raw; then
            echo "❌ Failed to create reports directory"
            exit 1
          fi
          
          # Verify directory is accessible
          if [[ ! -d "validation-reports/raw" ]] || [[ ! -w "validation-reports/raw" ]]; then
            echo "❌ Reports directory not accessible"
            exit 1
          fi
          
          # Run pytest with comprehensive reporting
          pytest -v --tb=short --maxfail=1 --disable-warnings \
            --junitxml=validation-reports/raw/pytest-junit.xml \
            --cov=. --cov-report=html:validation-reports/raw/coverage \
            --cov-report=term-missing 2>/dev/null || \
          echo "⚠️ No pytest tests found or tests failed"
          
          echo "✅ Backend tests completed"

      - name: Show files
        run: ls -la && echo "----" && ls -la scripts || true

      - name: Verify validation script exists
        run: |
          if [ -f scripts/run-validation-suite.sh ]; then
            echo "✅ Found scripts/run-validation-suite.sh"
            ls -la scripts/run-validation-suite.sh
          else
            echo "❌ Missing scripts/run-validation-suite.sh"
            echo "Available files in scripts/:"
            ls -la scripts/ || echo "No scripts directory found"
            exit 1
          fi

      - name: Make validation script executable
        run: chmod +x scripts/run-validation-suite.sh || true

      # ---------- Enhanced Validation Suite ----------
      - name: Pre-flight security checks
        run: |
          set -euo pipefail
          
          # Validate script path
          script_path="scripts/run-validation-suite.sh"
          if [[ ! "$script_path" =~ ^scripts/[a-zA-Z0-9._-]+\.sh$ ]]; then
            echo "❌ Invalid script path format"
            exit 1
          fi
          
          # Verify script exists and is readable
          if [[ ! -f "$script_path" ]] || [[ ! -r "$script_path" ]]; then
            echo "❌ Validation script not found or not readable"
            exit 1
          fi
          
          # Check script permissions (should not be world-writable)
          if [[ -w "$script_path" ]]; then
            echo "⚠️ Script is writable - potential security risk"
          fi
          
          echo "✅ Pre-flight security checks passed"

      - name: Run production-ready validation suite
        env:
          APP_ENV: ci
          CI: true
          VALIDATION_MODE: production
        run: |
          set -euo pipefail
          
          # Set execution timeout
          timeout 1800 ./scripts/run-validation-suite.sh || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "❌ Validation suite timed out after 30 minutes"
            else
              echo "❌ Validation suite failed with exit code: ${exit_code}"
            fi
            exit $exit_code
          }
          
          # Verify required outputs were created
          required_files=(
            "validation-reports/final/index.html"
            "validation-reports/final/summary.json"
          )
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required output file missing: $file"
              exit 1
            fi
          done
          
          echo "✅ Validation suite completed successfully"

      # ---------- Secure Artifact Collection ----------
      - name: Collect and validate reports
        run: |
          set -euo pipefail
          
          # Remove any existing public site
          rm -rf public-site
          
          # Create public site atomically
          if ! mkdir -p public-site; then
            echo "❌ Failed to create public-site directory"
            exit 1
          fi
          
          # Verify source directory exists
          if [[ ! -d "validation-reports/final" ]]; then
            echo "❌ Source reports directory missing"
            exit 1
          fi
          
          # Copy with verification
          if ! cp -R validation-reports/final/* public-site/; then
            echo "❌ Failed to copy reports to public site"
            exit 1
          fi
          
          # Validate critical files exist
          if [[ ! -f "public-site/index.html" ]]; then
            echo "❌ index.html missing from public site"
            exit 1
          fi
          
          if [[ ! -f "public-site/summary.json" ]]; then
            echo "❌ summary.json missing from public site"
            exit 1
          fi
          
          # Security: Remove any sensitive files
          find public-site -name "*.key" -o -name "*.pem" -o -name "*secret*" -delete 2>/dev/null || true
          
          # Calculate and log metrics
          site_size=$(du -sh public-site 2>/dev/null | cut -f1 || echo "unknown")
          file_count=$(find public-site -type f | wc -l)
          
          echo "📊 Site metrics:"
          echo "  Size: $site_size"
          echo "  Files: $file_count"
          echo "✅ Reports collected and validated"

      - name: Configure Pages with security headers
        uses: actions/configure-pages@1f0c5cde4bc74cd7e1254d0cb4de8d49e9068c7d # v4.0.0

      - name: Upload Pages artifact with validation
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: public-site
          retention-days: 30

      - name: Upload comprehensive validation artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: validation-reports-${{ github.run_number }}
          path: validation-reports
          if-no-files-found: error
          retention-days: 90
          compression-level: 6

      # ---------- Performance Metrics Collection ----------
      - name: Collect workflow metrics
        run: |
          set -euo pipefail
          
          echo "::group::Workflow Performance Metrics"
          echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "runner_os=${{ runner.os }}" >> $GITHUB_OUTPUT
          echo "workflow_duration=${{ github.event.repository.updated_at }}" >> $GITHUB_OUTPUT
          echo "artifact_count=$(find public-site -type f | wc -l)" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
          # Log to job summary
          echo "## 📊 Validation Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Time**: Started ${{ github.event.head_commit.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts Generated**: $(find public-site -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size**: $(du -sh public-site | cut -f1)" >> $GITHUB_STEP_SUMMARY

  # ---------- Secure Deployment Pipeline ----------
  deploy:
    needs: validate-and-build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write  # Only for deployment step
    steps:
      - name: Deploy to GitHub Pages with monitoring
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5
        timeout-minutes: 5

      - name: Validate deployment success
        run: |
          set -euo pipefail
          
          deployment_url="${{ steps.deployment.outputs.page_url }}"
          
          if [[ ! "$deployment_url" =~ ^https://[a-zA-Z0-9.-]+\.github\.io/ ]]; then
            echo "❌ Invalid deployment URL format"
            exit 1
          fi
          
          # Wait for deployment to be ready
          sleep 30
          
          # Verify deployment with retry
          for attempt in 1 2 3; do
            if curl -sf "$deployment_url" > /dev/null; then
              echo "✅ Deployment verified at $deployment_url"
              break
            elif [ $attempt -eq 3 ]; then
              echo "❌ Deployment verification failed after 3 attempts"
              exit 1
            else
              echo "⚠️ Verification attempt $attempt failed, retrying..."
              sleep 10
            fi
          done

      - name: Output deployment summary
        run: |
          set -euo pipefail
          
          deployment_url="${{ steps.deployment.outputs.page_url }}"
          
          echo "## ✅ Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Dashboard**: [$deployment_url]($deployment_url)" >> $GITHUB_STEP_SUMMARY
          echo "📄 **JSON API**: [$deployment_url/summary.json](${deployment_url}summary.json)" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Artifacts**: Available for 90 days" >> $GITHUB_STEP_SUMMARY
          echo "🔒 **Security**: All validations passed" >> $GITHUB_STEP_SUMMARY
          
          # Alert on critical findings
          if [[ -f "validation-reports/final/summary.json" ]]; then
            critical_failures=$(jq -r '.critical_failures // 0' validation-reports/final/summary.json)
            if [[ "$critical_failures" != "0" ]]; then
              echo "⚠️ **Critical Issues**: $critical_failures found - review required" >> $GITHUB_STEP_SUMMARY
            fi
          fi
