name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  # Comprehensive security scanning with Trivy (vulnerabilities), 
  # Bandit (code analysis), and Safety (dependency check)
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      # Run security scans in parallel for efficiency
      matrix:
        scan-type: [filesystem, dependencies]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Conditional execution based on matrix strategy for parallel processing
      - name: Run Trivy filesystem vulnerability scanner
        if: matrix.scan-type == 'filesystem'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          # Enhanced scanning with security focus
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        if: matrix.scan-type == 'filesystem' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'

      - name: Set up Python for dependency security scans
        if: matrix.scan-type == 'dependencies'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install security scanning tools
        if: matrix.scan-type == 'dependencies'
        run: |
          # Cache pip dependencies for faster subsequent runs
          pip install --upgrade pip
          pip install bandit[toml] sarif-om safety

      - name: Run Bandit static code analysis
        if: matrix.scan-type == 'dependencies'
        run: |
          # Comprehensive Bandit scan with unified SARIF reporting
          echo "::group::Running Bandit Security Analysis"
          bandit -r webapp/ -f json -o bandit-report.json -ll
          bandit -r webapp/ -f sarif -o bandit-results.sarif -ll
          echo "::endgroup::"
          # Fail on high/medium severity issues
          if [ $? -ne 0 ]; then 
            echo "::error::Critical security issues found by Bandit - Review required"
            exit 1
          fi

      - name: Run Safety dependency vulnerability check
        if: matrix.scan-type == 'dependencies'
        run: |
          echo "::group::Checking Dependencies for Known Vulnerabilities"
          # Enhanced safety check with comprehensive reporting
          safety check --json --output safety-report.json --full-report --continue-on-error
          SAFETY_EXIT_CODE=$?
          echo "::endgroup::"
          if [ $SAFETY_EXIT_CODE -ne 0 ]; then
            echo "::error::Vulnerable dependencies detected - Security review required"
            exit 1
          fi

      - name: Upload Bandit SARIF results to Security tab
        if: matrix.scan-type == 'dependencies' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'bandit-results.sarif'
          category: 'bandit-static-analysis'

      - name: Upload detailed security reports as artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ matrix.scan-type }}
          path: |
            *-report.json
            *-results.sarif
          retention-days: 30

      # Generate security summary for PR comments
      - name: Generate security scan summary
        if: always() && github.event_name == 'pull_request'
        run: |
          echo "## ðŸ”’ Security Scan Results - ${{ matrix.scan-type }}" >> $GITHUB_STEP_SUMMARY
          echo "Scan completed for: ${{ matrix.scan-type }}" >> $GITHUB_STEP_SUMMARY
          echo "Timestamp: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_dealerscope
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_dealerscope
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing
        run: |
          pytest tests/ -v --cov=webapp --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

  # Build and Push Docker Images
  build:
    needs: [security-scan, backend-test, frontend-test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # Deploy to staging
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment commands here

  # Deploy to production
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment commands here

  # Notify on failure
  notify-failure:
    if: failure()
    needs: [security-scan, backend-test, frontend-test, build]
    runs-on: ubuntu-latest

    steps:
      - name: Notify team of failure
        run: |
          echo "Pipeline failed - notification would be sent here"
          # Add notification logic (Slack, email, etc.)

  # Security compliance check
  compliance-check:
    runs-on: ubuntu-latest
    needs: [security-scan, backend-test]

    steps:
      - name: Check security compliance
        run: |
          echo "Running compliance checks..."
          # Add compliance verification logic
          echo "âœ… Security compliance verified"

      - name: Generate security report
        run: |
          echo "Generating security compliance report..."
          # Combine results from various security tools
          echo "Security scan results ready for review"