name: Production Deploy
on:
  push:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: lgpugcflvrqhslfnsjfh

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript check
        run: npx tsc --noEmit
        
      - name: Run linting
        run: npm run lint
        
      - name: Run canary tests
        run: |
          node tools/canary_runner.js \
            --urls-file=contracts/canaries/top_sites.json \
            --out=artifacts \
            --timeout=30000
            
      - name: Validate contracts
        run: |
          node tools/validate_provenance.js \
            artifacts/**/*.json \
            --schema=schemas/provenance.schema.json \
            --min-pass=0.95 \
            --fail-on-breach

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for vulnerabilities
        run: |
          # Check for common security issues
          echo "Checking for hardcoded secrets..."
          if grep -r "password\|secret\|key" src/ --include="*.ts" --include="*.tsx" | grep -v "// " | grep -v "interface" | grep -v "type"; then
            echo "❌ Potential hardcoded secrets found"
            exit 1
          fi
          echo "✅ No hardcoded secrets detected"

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Get version
        id: version
        run: echo "version=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT
        
      - name: Build application
        env:
          VITE_APP_VERSION: ${{ steps.version.outputs.version }}
          VITE_BUILD_TIME: ${{ github.run_number }}
          VITE_COMMIT_SHA: ${{ github.sha }}
        run: npm run build
        
      - name: Run bundle analysis
        run: |
          npx vite-bundle-analyzer dist/assets/*.js --json > bundle-analysis.json
          
      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(du -sh dist | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          
          # Fail if bundle is too large (>5MB)
          if [ $(du -sm dist | cut -f1) -gt 5 ]; then
            echo "❌ Bundle size exceeds 5MB limit"
            exit 1
          fi
          echo "✅ Bundle size within limits"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.version.outputs.version }}
          path: |
            dist/
            bundle-analysis.json
          retention-days: 30

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.version }}
          
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, scp, or cloud provider CLI
          
      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add staging smoke tests
          curl -f https://staging.dealerscope.com/api/health || exit 1
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Deployed to staging: https://staging.dealerscope.com'
            })

  deploy-production:
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.version }}
          
      - name: Validate production readiness
        run: |
          echo "🔍 Validating production readiness..."
          
          # Check for required environment variables
          if [ -z "$SUPABASE_URL" ]; then
            echo "❌ SUPABASE_URL not configured"
            exit 1
          fi
          
          # Validate deployment configuration
          node -e "
            const config = require('./src/config/deploymentConfig.ts');
            const validation = config.default.validateDeployment('production');
            if (!validation.ready) {
              console.error('❌ Production validation failed:', validation.issues);
              process.exit(1);
            }
            console.log('✅ Production validation passed');
          "
          
      - name: Database migration check
        run: |
          echo "🗄️ Checking database migrations..."
          # Add Supabase migration commands here
          
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # Add your production deployment commands here
          
      - name: Health check
        run: |
          echo "🏥 Running production health check..."
          sleep 30 # Wait for deployment
          
          # Check health endpoint
          for i in {1..5}; do
            if curl -f https://dealerscope.com/api/health; then
              echo "✅ Health check passed"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          done
          
      - name: Performance check
        run: |
          echo "⚡ Running performance check..."
          # Add Lighthouse CI or similar performance testing
          
      - name: Notify deployment
        run: |
          echo "📢 Production deployment completed!"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "URL: https://dealerscope.com"

  rollback:
    runs-on: ubuntu-latest
    environment: production
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'release')
    needs: [deploy-production]
    steps:
      - name: Rollback deployment
        run: |
          echo "🔄 Rolling back deployment..."
          # Add rollback commands here
          
      - name: Notify rollback
        run: |
          echo "⚠️ Deployment rolled back due to failure"